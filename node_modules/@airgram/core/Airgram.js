"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var components_1 = require("./components");
var utils_1 = require("./utils");
var getDefaultConfig = function () { return ({
    applicationVersion: '0.1.0',
    databaseDirectory: './db',
    databaseEncryptionKey: '',
    deviceModel: 'UNKNOWN DEVICE',
    logVerbosityLevel: 2,
    systemLanguageCode: 'en',
    systemVersion: 'UNKNOWN VERSION'
}); };
var tdlibOptions = [
    'useTestDc',
    'databaseDirectory',
    'filesDirectory',
    'useFileDatabase',
    'useChatInfoDatabase',
    'useMessageDatabase',
    'useSecretChats',
    'apiId',
    'apiHash',
    'systemLanguageCode',
    'deviceModel',
    'systemVersion',
    'applicationVersion',
    'enableStorageOptimizer',
    'ignoreFileNames'
];
function createState(starting) {
    var state = __assign({}, starting);
    var getState = function () { return (__assign({}, state)); };
    var setState = function (next) {
        if (typeof next === 'function') {
            state = __assign({}, state, next(state));
        }
        else {
            state = __assign({}, state, next);
        }
    };
    return { getState: getState, setState: setState };
}
function defineContextProperty(ctx, name, value) {
    var descriptor = {
        enumerable: true,
        configurable: false
    };
    if (typeof value === 'function') {
        descriptor.get = function () {
            return value();
        };
    }
    else if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
        descriptor.value = value;
        descriptor.writable = false;
    }
    else {
        descriptor.get = function () {
            return value;
        };
    }
    Object.defineProperty(ctx, name, descriptor);
}
function isUnwrapped(o) {
    return typeof o !== 'function';
}
function isWrapped(o) {
    return typeof o === 'function';
}
var Airgram = /** @class */ (function () {
    function Airgram(config) {
        var _this = this;
        this.on = function (predicateTypes) {
            var _a;
            var fns = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                fns[_i - 1] = arguments[_i];
            }
            (_a = _this.composer).on.apply(_a, [predicateTypes].concat(fns));
        };
        this.config = __assign({}, getDefaultConfig(), config);
        this.composer = new components_1.Composer();
        var provider = this.config.provider;
        if (!provider || typeof provider.initialize !== 'function') {
            throw new Error('The `provider` option is required.');
        }
        provider.initialize(function (update) { return _this.handleUpdate(update); }, function (message) {
            var error = message instanceof Error ? message : new Error(message);
            _this.handleError(error);
        }, this.config.models);
        this.provider = provider;
        this.handleError = function (error) {
            throw error;
        };
        this.callApi = this.callApi.bind(this);
        this.emit = this.emit.bind(this);
        this.api = new Proxy({}, {
            get: function (_target, method) {
                return function (params, options) {
                    return _this.callApi({ method: method, params: params }, options);
                };
            }
        });
        if (this.config.logVerbosityLevel) {
            this.api
                .setLogVerbosityLevel({
                newVerbosityLevel: this.config.logVerbosityLevel
            })
                .catch(this.handleError);
        }
        this.bootstrapMiddleware();
        setTimeout(function () { return _this.api.getAuthorizationState(); }, 0);
    }
    Object.defineProperty(Airgram.prototype, "name", {
        get: function () {
            return this.config.name || 'airgram';
        },
        enumerable: true,
        configurable: true
    });
    Airgram.prototype.catch = function (handler) {
        this.handleError = handler;
    };
    Airgram.prototype.emit = function (update) {
        return this.handleUpdate(update);
    };
    Airgram.prototype.use = function () {
        var _a;
        var fns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fns[_i] = arguments[_i];
        }
        (_a = this.composer).use.apply(_a, fns);
    };
    Airgram.prototype.apiMiddleware = function () {
        var _this = this;
        return components_1.Composer.optional(function (ctx) { return !!ctx.request; }, function (ctx, next) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.provider
                        .send(ctx.request)
                        .then(function (response) { return (ctx.response = response); })
                        .then(next)];
            });
        }); });
    };
    Airgram.prototype.bootstrapMiddleware = function () {
        var _this = this;
        var deferred = utils_1.createDeferred();
        this.use(function (ctx, next) { return __awaiter(_this, void 0, void 0, function () {
            var update;
            return __generator(this, function (_a) {
                if (!deferred) {
                    return [2 /*return*/, next()];
                }
                if ('update' in ctx && ctx.update) {
                    if (ctx._ === 'updateAuthorizationState') {
                        update = ctx.update;
                        switch (update.authorizationState._) {
                            case 'authorizationStateWaitTdlibParameters': {
                                this.api.setTdlibParameters({
                                    parameters: __assign({ _: 'tdlibParameters' }, utils_1.pick(this.config, tdlibOptions))
                                }).catch(this.handleError);
                                break;
                            }
                            case 'authorizationStateWaitEncryptionKey': {
                                this.api.checkDatabaseEncryptionKey({
                                    encryptionKey: this.config.databaseEncryptionKey
                                }).catch(this.handleError);
                                break;
                            }
                            default: {
                                setTimeout(function () {
                                    if (deferred) {
                                        deferred.resolve();
                                        deferred = null;
                                    }
                                }, 0);
                            }
                        }
                    }
                    return [2 /*return*/, next()];
                }
                else if (['setTdlibParameters', 'checkDatabaseEncryptionKey'].includes(ctx._)) {
                    return [2 /*return*/, next()];
                }
                return [2 /*return*/, deferred.promise.then(next)];
            });
        }); });
    };
    Airgram.prototype.callApi = function (request, options) {
        var _this = this;
        var ctx = this.createContext(request.method, (options && options.state) || {}, { request: request });
        return new Promise(function (resolve, reject) {
            var handler = components_1.Composer.compose([_this.composer.middleware(), _this.apiMiddleware()]);
            return handler(ctx, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, resolve(ctx)];
            }); }); }).catch(reject);
        }); // .catch((error) => this.handleError(error, ctx))
    };
    Airgram.prototype.createContext = function (_, state, props) {
        var ctx = {};
        defineContextProperty(ctx, '_', _);
        defineContextProperty(ctx, 'airgram', this);
        defineContextProperty(ctx, 'state', createState(state));
        Object.keys(props).forEach(function (name) {
            defineContextProperty(ctx, name, props[name]);
        });
        var extraContext = this.getExtraContext(ctx);
        Object.keys(extraContext).forEach(function (name) {
            defineContextProperty(ctx, name, extraContext[name]);
        });
        return ctx;
    };
    Airgram.prototype.getExtraContext = function (ctx) {
        var context = this.config.context;
        if (context) {
            if (isUnwrapped(context)) {
                return context;
            }
            if (isWrapped(context)) {
                return context(ctx);
            }
        }
        return {};
    };
    Airgram.prototype.handleUpdate = function (update) {
        var ctx = this.createContext(update._, {}, { update: update });
        return this.composer
            .middleware()(ctx, components_1.Composer.noop);
        // .catch((error: Error) => this.handleError(error, ctx))
    };
    return Airgram;
}());
exports.Airgram = Airgram;
