"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@airgram/core");
var tdweb_1 = __importDefault(require("tdweb"));
function camelCase(str) {
    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, function (_m, chr) { return chr.toUpperCase(); });
}
function snakeCase(str) {
    return str.replace(/[A-Z]/g, function (chr) { return "_" + chr.toLowerCase(); });
}
function isSerializable(value) {
    return typeof value === 'object' && !!value && ('_' in value || '@type' in value);
}
function isSerializableArray(value) {
    return (Array.isArray(value) && !!value.length && isSerializable(value[0]));
}
function createDeserializer(models) {
    var keyMap = new Map();
    var wrap = (function (value) { return models ? models(value) : value; });
    function deserialize(value) {
        if (isSerializable(value)) {
            var replacement_1 = { _: 'UNKNOWN' };
            Object.keys(value).forEach(function (k) {
                if (k === '@type' && value['@type']) {
                    replacement_1._ = value['@type'];
                    return;
                }
                if (!k) {
                    return;
                }
                if (k.charAt(0) === '@') {
                    replacement_1[k] = value[k];
                    return;
                }
                if (!keyMap.has(k)) {
                    keyMap.set(k, camelCase(k));
                }
                var v = value[k];
                var key = keyMap.get(k);
                if (isSerializableArray(v)) {
                    replacement_1[key] = v.map(function (x) { return wrap(deserialize(x)); });
                }
                else if (isSerializable(v)) {
                    replacement_1[key] = wrap(deserialize(v));
                }
                else {
                    replacement_1[key] = v;
                }
            });
            return wrap(replacement_1);
        }
        if (!value) {
            return value;
        }
        throw new Error("[Airgram][deserialize] invalid value: " + value);
    }
    return deserialize;
}
exports.createDeserializer = createDeserializer;
function createSerializer() {
    var keyMap = new Map();
    function serialize(value) {
        if (isSerializable(value)) {
            var replacement_2 = { '@type': 'UNKNOWN' };
            Object.keys(value).forEach(function (k) {
                if (k === '_' && value._) {
                    replacement_2['@type'] = value._;
                    return;
                }
                if (!k) {
                    return;
                }
                if (k.charAt(0) === '@') {
                    replacement_2[k] = value[k];
                    return;
                }
                if (!keyMap.has(k)) {
                    keyMap.set(k, snakeCase(k));
                }
                var v = value[k];
                var key = keyMap.get(k);
                if (isSerializableArray(v)) {
                    replacement_2[key] = v.map(serialize);
                }
                else if (isSerializable(v)) {
                    replacement_2[key] = serialize(v);
                }
                else {
                    replacement_2[key] = v;
                }
            });
            return replacement_2;
        }
        throw new Error("[Airgram][serialize] invalid value: " + value);
    }
    return serialize;
}
exports.createSerializer = createSerializer;
var TdProvider = /** @class */ (function (_super) {
    __extends(TdProvider, _super);
    function TdProvider(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.config = {};
        _this.handleUpdate = function () {
            throw new Error('Update handler is not defined.');
        };
        _this.config = config;
        return _this;
    }
    TdProvider.prototype.initialize = function (handleUpdate, _handleError, models) {
        var _this = this;
        var serialize = createSerializer();
        var deserialize = createDeserializer(models);
        this.handleUpdate = handleUpdate;
        var client = new tdweb_1.default(__assign({}, this.config, { onUpdate: function (update) { return _this.handleUpdate(deserialize(update)); } }));
        this.send = function (request) {
            return new Promise(function (resolve, reject) {
                client.send(serialize(__assign({ _: request.method }, request.params)))
                    .then(function (data) { return deserialize(data); })
                    .then(function (data) {
                    resolve(data);
                })
                    .catch(function (error) {
                    if ('@type' in error && error['@type']) {
                        var data = deserialize(error);
                        resolve(data);
                    }
                    else {
                        reject(error);
                    }
                });
            });
        };
    };
    TdProvider.prototype.send = function (_request) {
        throw new Error('TdWebClient is not initialized.');
    };
    return TdProvider;
}(core_1.TdProvider));
exports.TdProvider = TdProvider;
